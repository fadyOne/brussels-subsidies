// Script pour tester l'API Open Data de Bruxelles et voir les exigences

async function testBrusselsOpenDataAPI() {
  console.log("üîç Test de l'API Open Data Bruxelles...")

  // Mettre √† jour l'URL de base pour correspondre √† la console
  const baseUrl = "https://opendata.brussels.be/api/explore/v2.1"

  try {
    // 1. Tester l'acc√®s de base √† l'API
    console.log("\nüì° Test 1: Acc√®s de base √† l'API")
    const baseResponse = await fetch(`${baseUrl}/catalog/datasets?limit=5`)
    console.log("Status:", baseResponse.status)
    console.log("Headers:", Object.fromEntries(baseResponse.headers.entries()))

    if (baseResponse.ok) {
      const baseData = await baseResponse.json()
      console.log("‚úÖ API accessible sans cl√©")
      console.log("Nombre de datasets:", baseData.total_count)
      console.log(
        "Premiers datasets:",
        baseData.results?.slice(0, 3).map((d) => d.dataset_id),
      )
    } else {
      console.log("‚ùå Erreur d'acc√®s:", baseResponse.statusText)
    }

    // 2. Rechercher des datasets li√©s aux subsides
    console.log("\nüîç Test 2: Recherche de datasets 'subside'")
    const searchResponse = await fetch(`${baseUrl}/catalog/datasets?q=subside&limit=10`)

    if (searchResponse.ok) {
      const searchData = await searchResponse.json()
      console.log("‚úÖ Recherche r√©ussie")
      console.log("Datasets trouv√©s avec 'subside':", searchData.total_count)

      if (searchData.results && searchData.results.length > 0) {
        console.log("üìã Datasets disponibles:")
        searchData.results.forEach((dataset) => {
          console.log(`- ${dataset.dataset_id}: ${dataset.metas?.default?.title || "Sans titre"}`)
        })
      }
    }

    // 3. Rechercher d'autres termes li√©s
    console.log("\nüîç Test 3: Recherche d'autres termes")
    const terms = ["subvention", "aide", "financement", "soutien", "allocation"]

    for (const term of terms) {
      try {
        const termResponse = await fetch(`${baseUrl}/catalog/datasets?q=${term}&limit=5`)
        if (termResponse.ok) {
          const termData = await termResponse.json()
          if (termData.total_count > 0) {
            console.log(`üìä "${term}": ${termData.total_count} datasets trouv√©s`)
            termData.results?.slice(0, 2).forEach((dataset) => {
              console.log(`  - ${dataset.dataset_id}`)
            })
          }
        }
      } catch (error) {
        console.log(`‚ùå Erreur pour "${term}":`, error.message)
      }
    }

    // 4. Tester l'acc√®s √† un dataset sp√©cifique (si trouv√©)
    console.log("\nüìä Test 4: Acc√®s √† un dataset sp√©cifique")

    // Essayer quelques IDs de datasets possibles
    const possibleDatasets = [
      "subsides-regionaux-bruxelles",
      "aides-financieres-region-bruxelles",
      "subventions-associations",
      "subsides-culture",
      "subsides-sport",
      "subsides-social",
    ]

    for (const datasetId of possibleDatasets) {
      try {
        const datasetResponse = await fetch(`${baseUrl}/catalog/datasets/${datasetId}/records?limit=1`)
        if (datasetResponse.ok) {
          const datasetData = await datasetResponse.json()
          console.log(`‚úÖ Dataset trouv√©: ${datasetId}`)
          console.log(`   Total records: ${datasetData.total_count}`)
          if (datasetData.results && datasetData.results.length > 0) {
            console.log(`   Exemple de champs:`, Object.keys(datasetData.results[0].fields || {}))
          }
          break // Arr√™ter √† la premi√®re trouvaille
        }
      } catch (error) {
        // Continuer avec le suivant
      }
    }

    // 5. V√©rifier les limites de taux
    console.log("\n‚è±Ô∏è Test 5: V√©rification des limites")
    const rateLimitResponse = await fetch(`${baseUrl}/catalog/datasets?limit=1`)
    if (rateLimitResponse.ok) {
      const rateLimitHeaders = rateLimitResponse.headers
      console.log("Rate limit headers:")
      console.log("- X-RateLimit-Limit:", rateLimitHeaders.get("X-RateLimit-Limit"))
      console.log("- X-RateLimit-Remaining:", rateLimitHeaders.get("X-RateLimit-Remaining"))
      console.log("- X-RateLimit-Reset:", rateLimitHeaders.get("X-RateLimit-Reset"))
    }

    // Ajouter un test sp√©cifique pour les endpoints visibles dans la console
    console.log("\nüéØ Test des endpoints de la console officielle")

    // Test de l'endpoint /catalog/datasets visible dans la console
    const catalogResponse = await fetch(`${baseUrl}/catalog/datasets?limit=10`)
    console.log("Status /catalog/datasets:", catalogResponse.status)

    if (catalogResponse.ok) {
      const catalogData = await catalogResponse.json()
      console.log("‚úÖ Endpoint /catalog/datasets accessible")
      console.log("Total datasets:", catalogData.total_count)

      // Afficher les premiers datasets avec leurs IDs exacts
      if (catalogData.results) {
        console.log("\nüìã Datasets disponibles:")
        catalogData.results.forEach((dataset, index) => {
          console.log(`${index + 1}. ID: ${dataset.dataset_id}`)
          console.log(`   Titre: ${dataset.metas?.default?.title || "Sans titre"}`)
          console.log(
            `   Description: ${dataset.metas?.default?.description?.substring(0, 100) || "Pas de description"}...`,
          )
          console.log("")
        })
      }
    }

    // Test sp√©cifique pour trouver des datasets avec "subside" dans le titre ou la description
    console.log("\nüîç Recherche sp√©cifique de datasets de subsides")
    const subsidesSearch = await fetch(`${baseUrl}/catalog/datasets?q=subside&limit=20`)

    if (subsidesSearch.ok) {
      const subsidesData = await subsidesSearch.json()
      console.log(`üìä Datasets trouv√©s avec "subside": ${subsidesData.total_count}`)

      if (subsidesData.results && subsidesData.results.length > 0) {
        subsidesData.results.forEach((dataset) => {
          console.log(`üéØ DATASET POTENTIEL: ${dataset.dataset_id}`)
          console.log(`   Titre: ${dataset.metas?.default?.title}`)
          console.log(`   URL test: ${baseUrl}/catalog/datasets/${dataset.dataset_id}/records?limit=1`)
          console.log("")
        })
      }
    }
  } catch (error) {
    console.error("‚ùå Erreur g√©n√©rale:", error)

    // V√©rifier si c'est un probl√®me CORS
    if (error.message.includes("CORS")) {
      console.log("üö® Probl√®me CORS d√©tect√© - l'API pourrait n√©cessiter:")
      console.log("- Une cl√© API")
      console.log("- Des headers sp√©cifiques")
      console.log("- Un domaine autoris√©")
    }
  }

  // 6. Informations sur l'authentification
  console.log("\nüîê Informations d'authentification:")
  console.log("- L'API Open Data de Bruxelles est g√©n√©ralement publique")
  console.log("- V√©rifiez sur https://opendata.bruxelles.be si une inscription est n√©cessaire")
  console.log("- Certains datasets peuvent n√©cessiter une authentification")
}

// Ex√©cuter le test
testBrusselsOpenDataAPI()
